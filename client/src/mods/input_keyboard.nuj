[def input-keyboard-handler [array/allocate 256]]
[def input-keyboard-state   [array/allocate 256]]

[def key-a  4]
[def key-b  5]
[def key-c  6]
[def key-d  7]
[def key-e  8]
[def key-f  9]
[def key-g 10]
[def key-h 11]
[def key-i 12]
[def key-j 13]
[def key-k 14]
[def key-l 15]
[def key-m 16]
[def key-n 17]
[def key-o 18]
[def key-p 19]
[def key-q 20]
[def key-r 21]
[def key-s 22]
[def key-t 23]
[def key-u 24]
[def key-v 25]
[def key-w 26]
[def key-x 27]
[def key-y 28]
[def key-z 29]

[def key-1 30]
[def key-2 31]
[def key-3 32]
[def key-4 33]
[def key-5 34]
[def key-6 35]
[def key-7 36]
[def key-8 37]
[def key-9 38]
[def key-0 39]

[def key-return       40]
[def key-escape       41]
[def key-backspace    42]
[def key-tab          43]
[def key-space        44]
[def key-minus        45]
[def key-backspace    46]
[def key-leftbracket  47]
[def key-rightbracket 48]
[def key-backslash    49]
[def key-hash         50]
[def key-semicolon    51]
[def key-apostrophe   52]
[def key-grave        53]
[def key-comma        54]
[def key-period       55]
[def key-slash        56]
[def key-capslock     57]

[def key-f1    58]
[def key-f2    59]
[def key-f3    60]
[def key-f4    61]
[def key-f5    62]
[def key-f6    63]
[def key-f7    64]
[def key-f8    65]
[def key-f9    66]
[def key-f10   67]
[def key-f11   68]

[def key-f12   69]
[def key-print 70]

[def key-lshift 225]

[defun keyboard/default [code value]
        "Default handler to be used for continuously firing actions"
        [array/set! input-keyboard-state code [> value 0]]]

[defun toggle-chat! []
       "Toggle the chat visibility"
       [chat-open! [not [chat-open]]]]

[defun keyboard/once [fun]
        "Run FUN only once per keypress"
        [λ [code value]
           [if [zero? value]
               [array/set! input-keyboard-state code #f]
               [when [not [input-keyboard-state code]]
                     [array/set! input-keyboard-state code #t]
                     [fun]]]]]

[defun keyboard/once-up [fun]
        "Run FUN only once per keypress"
        [λ [code value]
            [if [zero? value]
                [when [ref input-keyboard-state code]
                      [array/set! input-keyboard-state code #f]
                      [fun]]
                [array/set! input-keyboard-state code #t]]]]

[defun keyboard/once-ingame [fun]
       [def handler [keyboard/once fun]]
       [λ [code value]
           [if [game-active?]
               [handler code value]
               [array/set! input-keyboard-state code #f]]]]

[defun keyboard/bind! [key handler]
       "Bind HANDLER to be evaluated once KEY has been pressed"
       [array/set! input-keyboard-handler key handler]]

[keyboard/bind! key-r      keyboard/default]
[keyboard/bind! key-q      keyboard/default]
[keyboard/bind! key-space  keyboard/default]
[keyboard/bind! key-w      keyboard/default]
[keyboard/bind! key-a      keyboard/default]
[keyboard/bind! key-s      keyboard/default]
[keyboard/bind! key-d      keyboard/default]
[keyboard/bind! key-v      keyboard/default]
[keyboard/bind! key-lshift keyboard/default]

[keyboard/bind! key-c     [keyboard/once-ingame [λ [] [cons-mode! [not [cons-mode?]]]]]]
[keyboard/bind! key-e     [keyboard/once-ingame [λ [] [fire-hook]]]]
[keyboard/bind! key-m     [keyboard/once        [λ [] [debug-info! [not [debug-info?]]]]]]
[keyboard/bind! key-n     [keyboard/once-ingame [λ [] [no-clip! [not [no-clip?]]]]]]

[keyboard/bind! key-f1    [keyboard/once [λ [] [third-person! #f] [save-options]]]]
[keyboard/bind! key-f2    [keyboard/once [λ [] [s [debug-stuff! pid]]]]]
[keyboard/bind! key-f3    [keyboard/once [λ [] [third-person! #t] [save-options]]]]
[keyboard/bind! key-f4    [keyboard/once [λ [] [widget/test-gc]]]]
[keyboard/bind! key-f8    [keyboard/once [λ [] [player-hp 16]]]]
[keyboard/bind! key-f9    [keyboard/once [λ [] [draw-boundaries! [wrap-value [+ 1 [draw-boundaries]] 0 3]]]]]
[keyboard/bind! key-f10   [keyboard/once [λ [] [wire-frame! [not [wire-frame?]]]]]]
[keyboard/bind! key-print [keyboard/once [λ [] [screenshot]]]]
;[keyboard/bind! key-tab   [keyboard/once [λ [] [toggle-inventory!]]]]
[keyboard/bind! key-t     [keyboard/once-up [λ [] [chat/toggle!]]]]
[keyboard/bind! key-comma [keyboard/once-up [λ [] [say "TEST"] [etest]]]]

[when-not [== OS "Emscripten"]
          [keyboard/bind! key-f11 [keyboard/once-up [\ [] [fullscreen! [not [fullscreen?]]] [save-options]]]]]

[defun inv-active-kh [code value]
        "Sets the players active item depending on the keycode passed"
        [when value
              [inventory/select! [+ 1 [- code 30]]]
              [stop-anim]]]

[for [i 0 10]
     [keyboard/bind! [resolve [str->sym [fmt "key-{i}"]]]
                     inv-active-kh]]

[defun input-keyboard-tick []
        "Keyboard input handler"
        [when [widget-focus-on-game?]
              [when [input-keyboard-state key-w]     [player-walk!   -1.0]]
              [when [input-keyboard-state key-s]     [player-walk!    1.0]]
              [when [input-keyboard-state key-a]     [player-strafe! -1.0]]
              [when [input-keyboard-state key-d]     [player-strafe!  1.0]]
              [when [input-keyboard-state key-space] [player-jump!    1.0]]
              [when [input-keyboard-state key-r]     [player-tertiary!]]
              ;[when [input-keyboard-state key-q]     [player-throw!]]
              [player-sneak! [input-keyboard-state key-v]]
              [player-boost! [input-keyboard-state key-lshift]]]]

[defun input-keyboard-event [status scancode]
       [try repl/exception-handler
            [def handler [input-keyboard-handler scancode]]
            [if [lambda? handler]
                [handler scancode status]
                #f]]]

[test/add #t [int? key-1]]
[test/add #t [array? input-keyboard-handler]]
[test/add 58 key-f1]
[test/add #t [bool? [widget-focus-on-game?]]]

 [def inventory/selection 3]
[def inventory [array/allocate 10]]
[def inventory/tile-size 64]
[def inventory/panel/widget #nil]
[def inventory/panel/widget/slots [array/allocate 8]]

[array/set! inventory 3 [make-instance <grenade>]]
[array/set! inventory 2 [make-instance <bomb>]]
[array/set! inventory 1 [make-instance <pear>]]

[def inventory/macro-panel/sprite #nil]
[def inventory/macro-panel/name #nil]

[defun inventory/get-active []
  [array/ref inventory inventory/selection]]

[defun inventory/widgets/refresh []
  [when macro-panel
    [when-not inventory/macro-panel/name
              [set! inventory/macro-panel/name
                [widget [ :label
                          :parent macro-panel
                          :width -1
                          :height 48
                          :label "asd"]]]]
    [when-not inventory/macro-panel/sprite
              [set! inventory/macro-panel/sprite
                [widget [ :sprite
                          :parent macro-panel
                          :x 24
                          :y 32
                          :width 64
                          :height 64
                          :val 257]]]]
    [def item [inventory/get-active]]
    [widget/label! inventory/macro-panel/name [if item [_ item :name] ""]]
    [widget/val! inventory/macro-panel/sprite [if item [_ item :gui-sprite] 0]]]]

[defun inventory/widgets/remove []
  [widget/remove! inventory/macro-panel/sprite
                  inventory/macro-panel/name]]

[defun inventory/panel/update! []
  [if blockchooser/active
      [inventory/widgets/remove]
      [inventory/widgets/refresh]]
  [for [i 0 [array/length inventory]]
    [def item [array/ref inventory i]]
    [def slot [array/ref inventory/panel/widget/slots i]]
    [widget/outline! [widget/parent [tree/get slot :slot]] [== i inventory/selection]]
    [if item
        [do [widget/val! [tree/get slot :slot] [_ item :gui-sprite]]
            [def q [_ item :get-quantity]]
          [when q
            [widget/label! [tree/get slot :quantity] [string q]]]]
        [do [widget/val! [tree/get slot :slot] 0]
            [widget/label! [tree/get slot :quantity] ""]]]]]

[defun inventory/panel/init! []
  [set! inventory/panel/widget [widget [ :panel
                                         :width [* [array/length inventory] inventory/tile-size]
                                         :height inventory/tile-size
                                         :x -129
                                         :y -1
                                         :val 0]]]
  [array/length! inventory/panel/widget/slots [array/length inventory]]
  [for [i 0 [array/length inventory]]
    [def slot [widget [ :button
                        :parent inventory/panel/widget
                        :x [* i 64]
                        :y 0
                        :width 64
                        :height 64]]]
    [def sprite [widget [ :sprite
                          :parent slot
                          :x 0
                          :y 0
                          :width -1
                          :height -1
                          :val 0]]]
    [array/set! inventory/panel/widget/slots i
                @[ :slot sprite
                   :quantity [widget [ :label
                                       :parent sprite
                                       :x -1
                                       :y -1
                                       :width 32
                                       :height 20
                                       :label ""]]]]]
  [inventory/panel/update!]]

[defun inventory/toggle! []
  "Toggle the visibility of the inventory popup"
  [blockchooser/toggle!]]

[defun inventory/select! [sel]
  "Selects the next item from a players inventory"
  [when [widget-focus-on-game?]
    [set! inventory/selection sel]
    [when [>= inventory/selection [array/length inventory]]
      [set! inventory/selection 0]]
    [when [< inventory/selection 0]
      [set! inventory/selection [- [block/count] 1]]]
    [inventory/panel/update!]]]

[defun inventory/select-next! []
  "Selects the next item from a players inventory"
  [inventory/select! [+ inventory/selection 1]]
  [inventory/panel/update!]]

[defun inventory/select-prev! []
  "Selects the previous item from a players inventory"
  [inventory/select! [- inventory/selection 1]]
  [inventory/panel/update!]]

[defun inventory/refresh []
  [blockchooser/refresh]]

[defun inventory/w/init! []
  [inventory/panel/init!]]

[defun inventory/find [item]
  [def ret -1]
  [for [i 0 [array/length inventory]]
    [when [== [array/ref inventory i] item]
      [set! ret i]
      [set! i [array/length inventory]]]]
  ret]

[defun inventory/remove! [item]
  [def i [inventory/find item]]
  [when [< i 0]
    [throw [list :invalid-item "Couldn't find that item so we can't remove it" item [current-lambda]]]]
  [array/set! inventory i #nil]]

[defun inventory/primary! [did-count]
  [def item [inventory/get-active]]
  [if [and item [_ item :primary]] #t
      [player-do-primary! did-count]]]

[defun inventory/secondary! []
  [def item [inventory/get-active]]
  [and item [_ item :secondary]]]

[defun inventory/tertiary! []
  [when [zero? input/tertiary-did-count]
    [def item [inventory/get-active]]
    [if [and item [_ item :tertiary]]
        #t
        [do [set! blockchooser/active [not blockchooser/active]]
            [inventory/panel/update!]
            [blockchooser/refresh]]]]]

[defun inventory/drop! []
  [def item [inventory/get-active]]
  [and item [_ item :drop [player-pos] [player-rot] 1.0 1]]]

[event-bind on-join :inventory inventory/w/init!]

[def hook/shot/timeout 0]
[def hook/rope #nil]
[def hook/ropes [array/allocate 32]]

[defun hook/pull-in! []
  [if [rope/valid? hook/rope]
      [do [def new-length [max [- [rope/length hook/rope] 0.4] 2.0]]
          [rope/length! hook/rope new-length]]
      [do [player/dont-move! #f]
          [set! hook/rope #nil]]]]

[defun hook/shoot! []
  [player/close-glider!]
  [when [> [time/milliseconds] hook/shot/timeout]
    [set! hook/shot/timeout [+ 200 [time/milliseconds]]]
    [message/send 0 [list :hook-shoot [player-pos] [player-rot]]]]]

[defhandler :hook-rope [client-id msg]
  [def player [cadr msg]]
  [def ent [caddr msg]]
  [def sender [cadddr msg]]
  [def rope [-> [rope/new* player ent]
                [rope/length! 192]]]
  [array/set! hook/ropes sender rope]
  [when [zero? sender]
    [set! hook/rope rope]]]

[defun hook/tick []
  [try display/error
       [and hook/rope
            [or [rope/valid? hook/rope]
                [player/dont-move! #f]
                [set! hook/rope #nil]]
            [> [rope/distance hook/rope] 96.0]
            [message/send 0 [list :hook-clear]]
            [do [player/dont-move! #f]
                [set! hook/rope #nil]]]]]

[defhandler :hook-hit [client-id msg]
            [when hook/rope
              [player/dont-move! #t]
              [rope/length! hook/rope [+ 8 [rope/distance hook/rope]]]]]

[defhandler :hook-clear [client-id msg]
            [player/dont-move! #f]
            [array/set! hook/ropes [cadr msg] #nil]]

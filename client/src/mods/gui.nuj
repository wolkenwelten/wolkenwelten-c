[def w-none             0]
[def w-space            1]
[def w-panel            2]
[def w-background       3]
[def w-horizontal-ruler 4]
[def w-label            5]
[def w-text-input       6]
[def w-button           7]
[def w-radio-button     8]
[def w-button-del       9]
[def w-slider          10]
[def w-sprite          11]
[def w-game-screen     12]
[def w-text-scroller   13]
[def w-text-log        14]

[def wf-hidden        #b0000_0000_0000_0001]
[def wf-hover         #b0000_0000_0000_0010]
[def wf-clicked       #b0000_0000_0000_0100]
[def wf-no-select     #b0000_0000_0000_1000]
[def wf-animate-x     #b0000_0000_0001_0000]
[def wf-animate-y     #b0000_0000_0010_0000]
[def wf-animate-w     #b0000_0000_0100_0000]
[def wf-animate-h     #b0000_0000_1000_0000]
[def wf-small         #b0000_0001_0000_0000]
[def wf-big           #b0000_0010_0000_0000]
[def wf-bigger        #b0000_0011_0000_0000]
[def wf-alt-clicked   #b0000_0100_0000_0000]
[def wf-mid-clicked   #b0000_1000_0000_0000]
[def wf-active        #b0001_0000_0000_0000]
[def wf-lisp          #b0010_0000_0000_0000]
[def wf-no-background #b0100_0000_0000_0000]

[defun widget/animate-x! [w goal]
       [widget/goal-x! w goal]
       [widget/flags! w [logior [widget/flags w] wf-animate-x]]]

[defun widget/animate-y! [w goal]
       [widget/goal-y! w goal]
       [widget/flags! w [logior [widget/flags w] wf-animate-y]]]

[defun widget/animate-w! [w goal]
       [widget/goal-w! w goal]
       [widget/flags! w [logior [widget/flags w] wf-animate-w]]]

[defun widget/animate-h! [w goal]
       [widget/goal-h! w goal]
       [widget/flags! w [logior [widget/flags w] wf-animate-h]]]

[defun widget/center-x! [w]
       [widget/x! w [- [/ [window-width] 2] [/ [widget/width w] 2]]]]

[defun widget/center-y! [w]
       [widget/y! w [- [/ [window-height] 2] [/ [widget/height w] 2]]]]

[defun widget/center! [w]
       [widget/center-x! w]
       [widget/center-y! w]]

[defun widget/val! [w val]
       [case [type-of val]
             [:int [widget/val/int! w val]]
             [otherwise [throw [list :type-error "Unsupported type" val [current-closure]]]]]]

#;[defun popup-new [headline bodytext]
       [widget [:panel :id panel :w 400 :h 400 :val 8 :center
                       [:label :id head :h 48 :label headline :big]
                       [:label :id text :h -88 :y 56 :label bodytext]
                       [:button :id button :w 64 :h 32 :x [- [/ 384 2] [/ 56 2]] :y -1 :label "OK" :selected
                                :click [λ [w event-name]
                                           [say ["Event handler fired for " [ansi-red event-name] " on " [str/write w]]]
                                           [widget/parent! panel #nil]
                                           [widget/focus! w-game-screen]]]]]]

[defun popup [headline bodytext]
       [def panel [-> [widget/new   w-panel]
                      [widget/width!    640]
                      [widget/height!   400]
                      [widget/val!        8]]]

       [def head [-> [widget/new     w-label]
                     [widget/parent!   panel]
                     [widget/width!       -1]
                     [widget/height!     80]
                     [widget/label! headline]]]
       [widget/flags! head wf-big]

       [def text [-> [widget/new      w-label]
                     [widget/parent!    panel]
                     [widget/y!            56]
                     [widget/width!        -1]
                     [widget/height!      -88]
                     [widget/label!  bodytext]]]

       [def button [-> [widget/new    w-button]
                       [widget/parent!   panel]
                       [widget/width!       64]
                       [widget/height!      32]
                       [widget/x!      [- [/ 384 2] [/ 56 2]]]
                       [widget/y!           -1]
                       [widget/label!     "OK"]
                       [widget/focus!]
                       [widget/bind "click" [λ [w event-name]
                                                [say ["Event handler fired for " [ansi-red event-name] " on " [str/write w]]]
                                                [widget/parent! panel #nil]
                                                [widget/focus! w-game-screen]]]]]
       [widget/center! panel]
       panel]

[defun pop []
        [say [ansi-rainbow "Creating popup"]]
        [popup "Test popup" [cat "This is just a short "
                                 [ansi-rainbow "test message,"]
                                 " not really indented for something useful. just long enough in order to trigger an automated line break and see if anything breaks because of the amount of characters contained in this text paragraph. Paketeinbandueberschriftsmarkierung."]]]

[defun widget/test-gc []
     [test-run]
     [def start-count [widget/active-count]]
     [def mid-count 0]
     [let* [def panel [pop]]
           [set! mid-count [widget/active-count]]
           [widget/parent! panel #nil]
           [widget/focus! w-game-screen]]
     [test-run]
     [def end-count [widget/active-count]]
     [def msg ["Start: " start-count " Mid: " mid-count " End: " end-count]]
     [say [if [<= end-count start-count]
              [ansi-rainbow msg]
              [ansi-red msg]]]]

[def w-none             0]
[def w-space            1]
[def w-panel            2]
[def w-background       3]
[def w-horizontal-ruler 4]
[def w-label            5]
[def w-text-input       6]
[def w-button           7]
[def w-radio-button     8]
[def w-button-del       9]
[def w-slider          10]
[def w-sprite          11]
[def w-game-screen     12]
[def w-text-scroller   13]
[def w-text-log        14]

[def widget/type/map @[ :space w-space
                        :panel w-panel
                        :background w-background
                        :horizontal-ruler w-horizontal-ruler
                        :label w-label
                        :text-input w-text-input
                        :button w-button
                        :radio-button w-radio-button
                        :button-del w-button-del
                        :slider w-slider
                        :sprite w-sprite
                        :game-screen w-game-screen
                        :text-scroller w-text-scroller
                        :text-log w-text-log]]

[def wf-hidden        #b0000_0000_0000_0001]
[def wf-hover         #b0000_0000_0000_0010]
[def wf-clicked       #b0000_0000_0000_0100]
[def wf-no-select     #b0000_0000_0000_1000]
[def wf-animate-x     #b0000_0000_0001_0000]
[def wf-animate-y     #b0000_0000_0010_0000]
[def wf-animate-w     #b0000_0000_0100_0000]
[def wf-animate-h     #b0000_0000_1000_0000]
[def wf-small         #b0000_0001_0000_0000]
[def wf-big           #b0000_0010_0000_0000]
[def wf-bigger        #b0000_0011_0000_0000]
[def wf-alt-clicked   #b0000_0100_0000_0000]
[def wf-mid-clicked   #b0000_1000_0000_0000]
[def wf-active        #b0001_0000_0000_0000]
[def wf-lisp          #b0010_0000_0000_0000]
[def wf-no-background #b0100_0000_0000_0000]
[def wf-outlined      #b1000_0000_0000_0000]

[defun widget/animate-x! [w goal]
  [widget/goal-x! w goal]
  [widget/flags! w [logior [widget/flags w] wf-animate-x]]]

[defun widget/animate-y! [w goal]
  [widget/goal-y! w goal]
  [widget/flags! w [logior [widget/flags w] wf-animate-y]]]

[defun widget/animate-w! [w goal]
  [widget/goal-w! w goal]
  [widget/flags! w [logior [widget/flags w] wf-animate-w]]]

[defun widget/animate-h! [w goal]
  [widget/goal-h! w goal]
  [widget/flags! w [logior [widget/flags w] wf-animate-h]]]

[defun widget/center-x! [w]
  [widget/x! w [- [/ [window-width] 2] [/ [widget/width w] 2]]]]

[defun widget/center-y! [w]
  [widget/y! w [- [/ [window-height] 2] [/ [widget/height w] 2]]]]

[defun widget/center! [w]
  [widget/center-x! w]
  [widget/center-y! w]]

[defun widget/delete! [wid]
  [widget/parent! wid #nil]]

[defun widget/set-flag! [w flag]
  [widget/flags! w [logior [widget/flags w] flag]]]

[defun widget/clear-flag! [w flag]
  [widget/flags! w [logand [widget/flags w] [lognot flag]]]]

[defun widget/modify-flag! [w flag set-or-clear]
  [[if [if [nil? set-or-clear] #t set-or-clear]
       widget/set-flag!
       widget/clear-flag!] w wf-outlined]]

[defun widget/outline! [w set-or-clear]
  [widget/modify-flag! w wf-outlined set-or-clear]]

[defun widget/val! [w val]
  [case [type-of val]
        [:int [widget/val/int! w val]]
        [otherwise [throw [list :type-error "Unsupported type" val [current-closure]]]]]]

[defun widget/add-child! [parent child]
  [widget/parent! child parent]
  parent]

[defun widget/type/get [name]
  [or [tree/get widget/type/map name]
      [throw [list :unknown-widget "Can't find a value for that particular widget type" name [current-lambda]]]]]

[defun widget/parse/rest [type v]
  [when [car v]
    [if [keyword? [car v]]
        [case [car v]
              [:focussed [cons [list 'widget/focus!]
                               [widget/parse/rest type [cdr v]]]]
              [:center [cons [list 'widget/center!]
                             [widget/parse/rest type [cdr v]]]]
              [:small [cons [list 'widget/set-flag! wf-small]
                            [widget/parse/rest type [cdr v]]]]
              [:big [cons [list 'widget/set-flag! wf-big]
                          [widget/parse/rest type [cdr v]]]]
              [:bigger [cons [list 'widget/set-flag! wf-bigger]
                             [widget/parse/rest type [cdr v]]]]
              [:active [cons [list 'widget/set-flag! wf-active]
                             [widget/parse/rest type [cdr v]]]]
              [:outlined [cons [list 'widget/set-flag! wf-outlined]
                               [widget/parse/rest type [cdr v]]]]
              [:no-background [cons [list 'widget/set-flag! wf-no-background]
                                    [widget/parse/rest type [cdr v]]]]
              [otherwise [cons [case [car v]
                                     [:x [list 'widget/x! [cadr v]]]
                                     [:y [list 'widget/y! [cadr v]]]
                                     [:flags [list 'widget/flags! [cadr v]]]
                                     [:parent [list 'widget/parent! [cadr v]]]
                                     [:label [list 'widget/label! [cadr v]]]
                                     [:val [list 'widget/val! [cadr v]]]
                                     [:on-click [list 'widget/bind "click" [cadr v]]]
                                     [:on-focus [list 'widget/bind "focus" [cadr v]]]
                                     [:on-blur [list 'widget/bind "blur" [cadr v]]]
                                     [:on-hover [list 'widget/bind "hover" [cadr v]]]
                                     [:on-submit [list 'widget/bind "submit" [cadr v]]]
                                     [:width [list 'widget/width! [cadr v]]]
                                     [:height [list 'widget/height! [cadr v]]]
                                     [otherwise [throw [list :unknown-attribute "Don't know what to do with that particular widget attribute" [car v] [current-lambda]]]]]
                               [widget/parse/rest type [cddr v]]]]]
        [cons [list 'widget/add-child! [widget/parse [car v]]]
              [widget/parse/rest type [cdr v]]]]]]

[defun widget/parse [v]
  [cons '-> [cons [list 'widget/new [widget/type/get [car v]]]
                  [widget/parse/rest [car v] [cdr v]]]]]

[defmacro widget args
          [widget/parse [car args]]]

[defun popup [headline bodytext]
  [def panel [widget [:panel :width 640 :height 400 :val 8 :center
                             [:label :big :parent panel :width -1 :height 80 :label headline]
                             [:label :y 56 :width -1 :height -88 :label bodytext]
                             [:button :width 64 :height 32 :x [- [/ 640 2] [/ 56 2]] :y -1 :label "OK" :focussed
                                      :on-click [λ [w event-name]
                                                  [say ["Event handler fired for " [ansi-red event-name] " on " [str/write w]]]
                                                  [widget/delete! panel]
                                                  [widget/focus! w-game-screen]]]]]]]

[defun pop []
  [popup "Test popup" [cat "This is just a short "
                           [ansi-rainbow "test message,"]
                           " not really indented for something useful. just long enough in order to trigger an automated line break and see if anything breaks because of the amount of characters contained in this text paragraph. Paketeinbandueberschriftsmarkierung."]]]

[defun widget/test-gc []
  [test-run]
  [def start-count [widget/active-count]]
  [def mid-count 0]
  [let* [def panel [pop]]
        [set! mid-count [widget/active-count]]
        [widget/parent! panel #nil]
        [widget/focus! w-game-screen]]
  [test-run]
  [def end-count [widget/active-count]]
  [def msg ["Start: " start-count " Mid: " mid-count " End: " end-count]]
  [say [if [<= end-count start-count]
           [ansi-rainbow msg]
           [ansi-red msg]]]]

[defmacro widget/remove! l
          [cons 'do [map l [λ [w]
                               `[when ~w
                                  [widget/parent! ~w #nil]
                                  [set! ~w #nil]]]]]]

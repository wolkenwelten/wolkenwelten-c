(def input-keyboard-handler (arr-new 256))
(def input-keyboard-state   (arr-new 256))

(def key-a  4)
(def key-b  5)
(def key-c  6)
(def key-d  7)
(def key-e  8)
(def key-f  9)
(def key-g 10)
(def key-h 11)
(def key-i 12)
(def key-j 13)
(def key-k 14)
(def key-l 15)
(def key-m 16)
(def key-n 17)
(def key-o 18)
(def key-p 19)
(def key-q 20)
(def key-r 21)
(def key-s 22)
(def key-t 23)
(def key-u 24)
(def key-v 25)
(def key-w 26)
(def key-x 27)
(def key-y 28)
(def key-z 29)

(def key-1 30)
(def key-2 31)
(def key-3 32)
(def key-4 33)
(def key-5 34)
(def key-6 35)
(def key-7 36)
(def key-8 37)
(def key-9 38)
(def key-0 39)

(def key-f1    58)
(def key-f2    59)
(def key-f3    60)
(def key-f4    61)
(def key-f5    62)
(def key-f6    63)
(def key-f7    64)
(def key-f8    65)
(def key-f9    66)
(def key-f10   67)
(def key-f11   68)
(def key-f12   69)
(def key-print 70)

(def input-keyboard-handler-default (λ (code value)
	"Default handler to be used for continuously firing actions"

	(arr-set! input-keyboard-state code (> value 0))
))

(arr-set! input-keyboard-handler key-r input-keyboard-handler-default)
(arr-set! input-keyboard-handler key-q input-keyboard-handler-default)

(arr-set! input-keyboard-handler key-c   (λ (code value) (when value (cons-mode!  (not (cons-mode!))))))
(arr-set! input-keyboard-handler key-e   (λ (code value) (when value (fire-hook))))
(arr-set! input-keyboard-handler key-m   (λ (code value) (when value (debug-info! (not (debug-info!))))))
(arr-set! input-keyboard-handler key-n   (λ (code value) (when value (no-clip!    (not (no-clip!))))))

(arr-set! input-keyboard-handler key-f1  (λ (code value) (when value (third-person! #f) (save-options))))
(arr-set! input-keyboard-handler key-f2  (λ (code value) (when value (s (debug-stuff!)))))
(arr-set! input-keyboard-handler key-f3  (λ (code value) (when value (third-person! #t) (save-options))))
(arr-set! input-keyboard-handler key-f10 (λ (code value) (when value (wire-frame! (not (wire-frame!))))))

(unless (eq? OS "Emscripten")
	(input-keyboard-handler key-f11 (λ (code value)
		(when value
			(fullscreen! (not (fullscreen!)))
			(save-options)
		)
	))
)

(def inv-active-kh (λ (code value)
	"Sets the players active item depending on the keycode passed"

	(when value
		(player-active-slot! (- code 30))
		(stop-anim)
	)
))

(arr-set! input-keyboard-handler key-1 inv-active-kh)
(arr-set! input-keyboard-handler key-2 inv-active-kh)
(arr-set! input-keyboard-handler key-3 inv-active-kh)
(arr-set! input-keyboard-handler key-4 inv-active-kh)
(arr-set! input-keyboard-handler key-5 inv-active-kh)
(arr-set! input-keyboard-handler key-6 inv-active-kh)
(arr-set! input-keyboard-handler key-7 inv-active-kh)
(arr-set! input-keyboard-handler key-8 inv-active-kh)
(arr-set! input-keyboard-handler key-9 inv-active-kh)
(arr-set! input-keyboard-handler key-0 inv-active-kh)
(arr-set! input-keyboard-handler key-print (λ (code value) (when value (screenshot))))

(test-add #t (int? key-1))
(test-add #t (array? input-keyboard-handler))
(test-add 58 key-f1)

(def input-keyboard-tick (λ ()
	"Keyboard input handler"

	(when (input-keyboard-state key-r) (player-tertiary!))
	(when (input-keyboard-state key-q) (player-throw!))
))

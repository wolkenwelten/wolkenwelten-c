[def quests #nil]
[def quest/panels #nil]

[defun duration-to-clock-string [secs]
     [cat [string [/ secs 60]] [if [zero? [logand secs 1]] " " ":"] [% secs 60]]
]

[defun quest/panel/position! []
     [def y 64]
     [for-each [λ [cur-panel]
                  [widget/y! cur-panel y]
                  [set! y [+ y [widget/height cur-panel] 8]]
               ]
               quest/panels]
]

[defun quest/panel/remove! [panel]
     [set! quest/panels
           [filter [λ [cur-panel]
                      [!= cur-panel panel]]
                   quest/panels]]
]

[defun quest/panel/new! [headline bodytext wid panel-height]
     [when-not panel-height [def panel-height 120]]
     [def panel   [widget/new w-panel]]
     [def head    [widget/new w-label]]
     [def text    [widget/new w-label]]

     [def wid-height 0]
     [when wid [set! wid-height [+ 8 [widget/height wid]]]]

     [widget/parent! panel w-game-screen]
     [widget/x!      panel  -8]
     [widget/y!      panel   8]
     [widget/width!  panel 320]
     [widget/height! panel [+ panel-height wid-height]]
     [widget/val/int! panel 8]

     [widget/parent! head panel]
     [widget/width!  head  -1]
     [widget/height! head  64]
     [widget/label!  head headline]

     [widget/parent! text panel]
     [widget/y!      text  48]
     [widget/width!  text  -1]
     [widget/height! text [- -48 wid-height]]
     [widget/flags!  text wf-small]
     [widget/label!  text bodytext]

     [when wid
           [widget/parent! wid panel]
           [widget/y! 120]
           [widget/x! 8]
           [widget/width! -1]
     ]

     [set! quest/panels [cons panel quest/panels]]
     [quest/panel/position!]
     panel
]

[def quest/default [ω
        [def active #f]
        [def finished #f]
        [def name "Default Quest"]
        [def body "Placeholder for some descriptive text"]
        [def refresh! [λ [] #f]]
        [def active? [λ [] #f]]
        [def active! [δ []
                       [say [cat [ansi-yellow "New Quest: "] name]]
        ]]
        [def finish? [λ [] #f]]
        [def finish! [δ []
                       [say [cat [ansi-green "Quest finished: "] name]]
        ]]
        [def check-finished! [δ []
                [when [finish?]
                      [finish!]
                      [set! finished #t]]
        ]]
        [def check-active! [δ []
                [when [active?]
                      [active!]
                      [set! active #t]]
        ]]
]]

[defun quest/new [@...args]
        "Create a new quest object"
        [def ret [quest/default [ω]]]
        [apply ret '[[def active #f] [def finished #f]]]
        [apply ret @...args]
        [set! quests [cons ret quests]]
        ret
]

[def quest-test-time [quest/new
        [def name [cat "Staying alive for " [ansi-red "300"] " Seconds"]]
        [def body ["As your first task you have to stay alive for just " [ansi-red "300"] " seconds, hopefully you can achieve this goals and continue onwards on your adventures. Best of luck there, adventurer!"]]
        [def panel]
        [def quest-start 0]
        [def progress-widget]
        [def refresh! [λ []
                        [widget/label! progress-widget
                                       [ duration-to-clock-string[/ [[quest-start + 300000] - [time/milliseconds]] 1000]]]
                        [def progress [[[time/milliseconds] - quest-start] / 300000.0]]
                        [widget/val/int! progress-widget
                                         [int [progress * 4096.0]]]
        ]]
        [def finished #f]
        [def finish? [λ []
                       [[widget/val/int progress-widget] >= 4080]
        ]]
        [def finish! [λ []
                [[[self 1] finish!]]
                [widget/parent! panel #nil]
                [quest/panel/remove! panel]
                [set! panel #nil]
                [quest/panel/position!]
        ]]
        [def active? [λ [] #t]]
        [def active! [λ []
                [[[self 1] active!]]
                [set! quest-start [time/milliseconds]]

                [set! progress-widget [widget/new w-slider]]
                [widget/height! progress-widget 32]
                [widget/width! progress-widget -1]
                [widget/y! progress-widget -1]
                ;[widget/label! progress-widget ""]
                [set! panel [quest/panel/new! name body progress-widget]]
        ]]
]]

[defun player-inventory-fetch-string [id name goal-amount]
  [[if [>= [player-ingredient-get id] goal-amount]
       ansi-green
       cat] [int [player-ingredient-get id]] " / " goal-amount " - " name]
]

[def quest-test-fetch [quest/new
        [def name "Gather material for a Pickaxe"]
        [def body ["To help you on your journey, building a pickaxe should make mining much more convenient. To build a pickaxe you need 2 wooden boards, 4 stones and 2 plantmatter." ]]
        [def panel]
        [def progress-widget]
        [def finish! [λ []
                        [[[self 1] finish!]]
                        [widget/parent! panel #nil]
                        [quest/panel/remove! panel]
                        [quest/panel/position!]
                        [set! panel #nil]
        ]]
        [def refresh! [λ []
                        [widget/label! progress-widget
                                       [cat [player-inventory-fetch-string i-boards "Boards" 2] "\n"
                                            [player-inventory-fetch-string i-stone "Stones" 4] "\n"
                                            [player-inventory-fetch-string i-plantmatter "Plants" 2]]]
        ]]
        [def finish? [λ []
                       [and [[player-ingredient-get i-boards] >= 2]
                            [[player-ingredient-get i-stone] >= 4]
                            [[player-ingredient-get i-plantmatter] >= 2]]
        ]]
        [def active? [λ [] #t]]
        [def active! [λ []
                       [[[self 1] active!]]

                       [set! progress-widget [widget/new w-label]]
                       [widget/height! progress-widget 96]
                       [widget/width! progress-widget  -1]
                       [widget/y! progress-widget -8]
                       [widget/x! progress-widget  0]
                       [refresh!]
                       [set! panel [quest/panel/new! name body progress-widget 140]]
        ]]
]]

[def quest-test-fetch [quest/new
        [def name "Build a stone Pickaxe"]
        [def body ["Now use the gathered materials to build your first tool, a pickaxe." ]]
        [def panel]
        [def progress-widget]
        [def finish! [λ []
                        [[[self 1] finish!]]
                        [widget/parent! panel #nil]
                        [quest/panel/remove! panel]
                        [quest/panel/position!]
                        [set! panel #nil]
        ]]
        [def refresh! [λ []
                        [widget/label! progress-widget [player-inventory-fetch-string i-stone-pickaxe "Pickaxe" 1]]
        ]]
        [def finish? [λ []
                       [[player-ingredient-get i-stone-pickaxe] >= 1]
        ]]
        [def active? [λ [] #t]]
        [def active! [λ []
                       [[[self 1] active!]]

                       [set! progress-widget [widget/new w-label]]
                       [widget/height! progress-widget 48]
                       [widget/width! progress-widget  -1]
                       [widget/y! progress-widget -8]
                       [widget/x! progress-widget  0]
                       [refresh!]
                       [set! panel [quest/panel/new! name body progress-widget]]
        ]]
]]

[defun quest/refresh []
        [def l quests]
        [def cur #nil]
        [while l
               [try repl/exception-handler
                    [set! cur [car l]]
                    [if [cur active]
                        [unless [cur finished] [cur [check-finished!]] [[cur refresh!]] ]
                        [cur [check-active!]]]
               ]
               [set! l [cdr l]]
        ]
]

[event-bind "on-join" [λ []
        [quest/refresh]
]]

[event-bind "on-gameplay-tick" [λ []
        [quest/refresh]
]]

[event-bind "on-leave" [λ []
            [println "Test"]
            [for-each [λ [panel] [widget/parent! panel #nil]] quest/panels]
            [set! quests #nil]
            [set! quest/panels #nil]
]]

[def client? #f]
[def server? #t]

[def test-context "WolkenWelten Server"]
[test/add #t [and [not client?] server?]]

[defun error args
	"Print its arguments into the LISP console and might alert the user"
	[say [apply cat args]]]

[defun log args
	"Print its arguments into the LISP console"
	[print [apply cat args]]]

[defun heal [a]
	"Heals oneself by a points"
	[- [dmg [cond [a [- a]] [#t -20]]]]]

[defun time/morning! []
	"Sets the Time to 8:00 AM"
	[game/time "8:00"]]

[defun time/noon! []
	"Sets the Time to 12:00 PM"
	[game/time "12:00"]]

[defun time/evening! []
	"Sets the Time to 21:30 PM"
	[game/time "21:30"]]

[defun time/night! []
	"Sets the Time to Midnight"
	[game/time "24:00"]]

[defun player-x []
	"Return the current players X Position"
	[vec/x [player-pos]]]

[defun player-y []
	"Return the current players Y Position"
	[vec/y [player-pos]]]

[defun player-z []
	"Return the current players Z Position"
	[vec/z [player-pos]]]

[def item-drop-stress [let*
	[def item-drop-stress-xz [λ [pos max x z]
		[item-drop-new [+ [vec x -6 z] pos] i-crystals 1]
		[when [< z max] [item-drop-stress-xz pos max x [+ 2 z]]]
	]]
	[def item-drop-stress-x [λ [pos max x]
		[item-drop-stress-xz pos max x -max]
		[when [< x max] [item-drop-stress-x pos max [+ 2 x]]]
	]]
	[λ [pos max]
		"Stress test the itemDrop code by generating a lot of them"
		[item-drop-stress-x pos max -max]
	]]]

[def animal-stress [let*
	[def stress-xz [λ [pos max x z]
		[animal-new [+ [vec x 6 z] pos] 1 1]
		[when [< z max] [stress-xz pos max x [+ 4 z]]]
	]]
	[def stress-x [λ [pos max x]
		[stress-xz pos max x -max]
		[when [< x max] [stress-x pos max [+ 4 x]]]
	]]
	[λ [pos max]
		"Generate a lot of animals"
		[stress-x pos max -max]
	]]]

[defun rain []
	"Make it Rain!"
	[cloud-density 0.9]]

[defun cloud-density [a]
	"Set the new Goal Density to a which should be a float in the range 0.0 - 1.0."
	[- 1.0 [/ [cloud-threshold! [* [- 1.0 a] 256.0]] 256.0]]]

[defun countdown [i]
	"Counts down on the console"
	[cond [[< [int i] 0] #t]
		[#t [say  [cond [[zero? i] [[ansi-green "GO!"] [ansi-yellow "!"] [ansi-red "!"]]]
				[[< i 4] [ansi-red i]]
				[[< i 6] [ansi-yellow i]] [#t i]]]
		[yield [timeout 1000] [lambda []  [countdown [-- i]]]]]]]

; Needs to be a dynamic function because the player's ID is only in the calling context
[defun debug-stuff! [pid]
        "Gives the issuing player some nice stuff to get started with"
        [say [ansi-rainbow "For now you don't get much more than this (very helpful) message"]]]

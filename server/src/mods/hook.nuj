[def hook/entites [array/allocate 32]]

[defun hook/entity->client-id [ent]
  [def ret #nil]
  [for [i 0 32]
       [when [== ent [array/ref hook/entites i]]
         [set! ret i]]]
  ret]

[defun hook/collision-handler [ent]
       [-> ent
           [entity/no-clip! #t]
           [entity/velocity! [vec 0]]]
       [def client-id [hook/entity->client-id ent]]
       [when client-id [message/send client-id [list :hook-hit]]]]

[defun hook/return! [sender]
  [def ent [ref hook/entites sender]]
  [entity/delete ent]
  [array/set! hook/entites sender #nil]]

[defun hook/new! [pos rot player]
  [def ent [-> [entity/new*]
               [entity/pos! pos]
               [entity/rotation! [- rot]]
               [entity/velocity! [* [vec/rot->vel rot] [vec 0.6]]]
               [entity/flags! 0]
               [entity/handler! [\ [t v]
                                 [case t
                                   [:collision [hook/collision-handler ent]]
                                   [otherwise [say [cat [ansi-yellow "Unknown event: "] t]]]]]]
               ]]
  [-> [rope/new* [character->being player]
                 [entity->being ent]]
      [rope/length! 128]]
  [message/send -1 [list :hook-rope [character->being player] [entity->being ent] player]]
  ent]

[defhandler :hook-shoot [sender msg]
  [if [ref hook/entites sender]
      [hook/return! sender]
      [array/set! hook/entites
                  sender
                  [hook/new! [eval [cadr msg]]
                             [eval [caddr msg]]
                             sender]]]]

[defhandler :hook-clear [sender msg]
  [when [ref hook/entites sender]
    [hook/return! sender]
    [message/send -1 [list :hook-clear sender]]]]

[def random-offset [λ [minmax] "Returns a random value between -MINMAX and MINMAX"
	[- [% [abs [random]] [* minmax 2]] minmax]
]]

[def little-islands [λ [x y z num] "Generate NUM islands suround X Y Z"
	[cond [[<= num 0] #nil]
		[#t
			[let [
				[cx [+ x [random-offset 64]]]
				[cy [+ y [random-offset 64]]]
				[cz [+ z [random-offset 64]]]
				[radius [+ 8 [random-offset 6]]]
			]
				[worldgen/sphere cx cy cz radius i-stone]
				[little-islands x y z [-- num]]
			]
		]
	]
]]

[def worldgen [λ [x y z] "Worldgen of a single chungus a X Y Z"
	[let [
		[old-seed [random-seed]]
		[new-seed [logior [ash [logand x #xFF00] -8] [logand y #xFF00] [ash [logand z #xFF00] 8]]]
	]
		[random-seed! new-seed]
		[when [= [logand [random] #x3F] 0]
			[let [
				[cx     [+ x 128 [random-offset 32]]]
				[cy     [+ 384 [random-offset 64]]]
				[cz     [+ z 128 [random-offset 32]]]
				[radius [+ 160 [random-offset 64]]]
			]
				[worldgen/sphere cx cy cz radius i-stone]
			]
		]
		; [worldgen/sphere 33000 300 33000 192 i-stone]
		 [little-islands cx cy cz [+ 4 [% [abs [random]] 8]]]
		; [box [vec cx cy cz] [vec radius] i-dirt]
		[random-seed! old-seed]
	]
]]

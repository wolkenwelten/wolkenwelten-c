; This File contains all the item defitions
; ToDo find a better way for these defines
(define items (arr-new 256))
(define item-new-id)
(let ((item-cur-id 256))
	(set! item-new-id (λ () "Returns an unused item ID"
		(set! item-cur-id (+ item-cur-id 1)) (- item-cur-id 1))))

(define item-sync (λ (obj) "Syncs the itemType with the ω OBJ"
	(cond ((nil? obj) #f)
		(#t (it-name (obj id) (obj name))
		(it-fire-health (obj id) (obj fire-health))
		(it-fire-dmg (obj id) (obj fire-dmg))
		(it-ammunition (obj id) (resolve (obj ammunition)))
		(it-mesh (obj id) (resolve (obj mesh)))
		(it-damage (obj id) cat-none (obj dmg))
		(it-damage (obj id) cat-dirt (obj dmg-dirt))
		(it-damage (obj id) cat-stone (obj dmg-stone))
		(it-damage (obj id) cat-wood (obj dmg-wood))
		(it-damage (obj id) cat-leaves (obj dmg-leaves))
		(it-inaccuracy (obj id) (obj inaccuracy))
		(it-mag-size (obj id) (obj mag-size))
		(it-stack-size (obj id) (obj stack-size))
		(it-item-drop-cb (obj id) (obj drop-chance))

		(it-sprite-id (obj id) 0 (obj sprite-id-0))
		(it-sprite-id (obj id) 1 (obj sprite-id-1))
		(it-sprite-id (obj id) 2 (obj sprite-id-2))
		(it-sprite-id (obj id) 3 (obj sprite-id-3))
		(it-sprite-color (obj id) 0 (obj sprite-color-0))
		(it-sprite-color (obj id) 1 (obj sprite-color-1))
		(it-sprite-color (obj id) 2 (obj sprite-color-2))
		(it-sprite-color (obj id) 3 (obj sprite-color-3))

		(set! (obj sym) (obj id))
		(items (- (obj id) 256) obj)))))

(define item-sync-all (λ (i) "Syncs all itemTypes with their respective ω"
	(cond ((> i (arr-length items)) #t)
	      (#t (item-sync (items (int i))) (item-sync-all (+ i 1))))))

(define item-primary (λ (id) "Evaluates the primary callback of item ID"
	(cond ((procedure? ((items (- id 256)) primary)) (((items (- id 256)) primary)))
	      (#t #f))))

(define item-secondary (λ (id) "Evaluates the secondary callback of item ID"
	(cond ((procedure? ((items (- id 256)) secondary)) (((items (- id 256)) secondary)))
	      (#t #f))))

(define item-tertiary (λ (id) "Evaluates the tertiary callback of item ID"
	(cond ((procedure? ((items (- id 256)) tertiary)) (((items (- id 256)) tertiary)))
	      (#t #f))))

(define add-inaccuracy (λ (amt) "Increase players inaccuracy my AMT"
	(inaccuracy (+ (inaccuracy) amt))))

(define held-item-id (λ () "Returns the itemID that the player currently holds"
	(player-inv (inv-active-slot))))

(define do-eat (λ (hp itemid) "Make the player Eat and restores HP health over time"
	(cond ((ineq? itemid (held-item-id)) #t)
		((or (<= hp 0) (>= (player-hp) (player-maxhp))) #t)
		(#t (yield (timeout 1000) (λ () (do-eat (- hp 1) itemid)))
		(cond ((or (= hp 1) (= (player-hp) (- (player-maxhp) 1))) (say (ansi-green "Omnomnom")))
			((even? hp) (say (ansi-green "Om")))
			(#t (say (ansi-darkgreen "Nom"))))
		(player-hp (+ (player-hp) 1))
		(start-anim 4 800)
		(add-cooldown 1000)
		(sfx-play sfx-chomp) #t))))

(define item-burn-up (λ (pos id amount) "Calls the specific burn up handler that AMOUNT ID items have burned up at POS"
	(cond ((procedure? ((items (- id 256)) burn-up)) (((items (- id 256)) burn-up) pos id amount))
	      (#t #f))))

(define item-drop-cb (λ (pos id amount) "Calls the specific drop handler that AMOUNT ID items are dropped at POS, only gets called when the a random value masked by chance equals 0"
	(cond ((procedure? ((items (- id 256)) drop-handler)) (((items (- id 256)) drop-handler) pos id amount))
	      (#t 0))))

(define shotgun-shot (λ (i) "Shoots I shots"
	(cond ((<= i 0) #t) (#t (projectile 0 4) (shotgun-shot (-- i))))))


(define item-default (ω ()
	(define id 0)
	(define sym 'i-default)
	(define name "DEFAULT")
	(define description "")
	(define fire-health 256)
	(define fire-dmg 1)
	(define ammunition 0)
	(define mesh 'm-pear)
	(define dmg 1)
	(define dmg-dirt 1)
	(define dmg-stone 1)
	(define dmg-wood 1)
	(define dmg-leaves 1)
	(define inaccuracy 8.0)
	(define mag-size 0)
	(define primary   (λ () #f))
	(define secondary (λ () #f))
	(define tertiary  (λ () #f))
	(define sprite-id-0 -1)
	(define sprite-id-1 -1)
	(define sprite-id-2 -1)
	(define sprite-id-3 -1)
	(define sprite-color-0 -1)
	(define sprite-color-1 -1)
	(define sprite-color-2 -1)
	(define sprite-color-3 -1)
	(define item-drop-chance 0)
	(define stack-size 99)))


(define i-grenade)
(item-sync (item-default (ω ()
	(define id (item-new-id))
	(define sym 'i-grenade)
	(define name "Grenade")
	(define description ("Grenade that after being\nthrown goes B" (ansi-yellow "OO") (ansi-red "M!!!")))
	(define fire-health 48)
	(define fire-dmg 24)
	(define ammunition id)
	(define secondary (λ () (cond ((try-to-use)
		(grenade-new (vy+ (player-pos) 0.5))
		(start-anim 0 300) #t)
		(#t #f))))
	(define burn-up (λ (pos id amount) (explode pos (* amount 3)) (say (ansi-red "Kabloom"))))
	(define sprite-id-0 256)
	(define mesh 'm-grenade))))

(define i-bomb)
(item-sync (item-default (ω ()
	(define id (item-new-id))
	(define sym 'i-bomb)
	(define name "Bomb")
	(define fire-health 48)
	(define fire-dmg 16)
	(define ammunition id)
	(define secondary (λ () (cond ((try-to-use)
		(grenade-new (vy+ (player-pos) 0.5) (player-rot) 8.0)
		(start-anim 0 300) #t)
		(#t #f))))
	(define burn-up (λ (pos id amount) (explode pos (* amount 6)) (say ((ansi-yellow "Ka") (ansi-red "booooom")))))
	(define sprite-id-0 257)
	(define mesh 'm-bomb))))

(define i-pear)
(item-sync (item-default (ω ()
	(define id (item-new-id))
	(define sym 'i-pear)
	(define name "Pear")
	(define fire-health 48)
	(define fire-dmg 8)
	(define ammunition id)
	(define secondary (λ ()
		(cond	((>= (player-hp) (player-maxhp)) #f)
			((try-to-use) (do-eat 8 id) #t)
			(#t #f))))
	(define sprite-id-0 258)
	(define mesh 'm-pear))))

(define i-stoneaxe)
(item-sync (item-default (ω ()
	(define id (item-new-id))
	(define sym 'i-stoneaxe)
	(define name "Stone Axe")
	(define stack-size 1)
	(define dmg 4)
	(define dmg-wood 3)
	(define primary (λ ()
		(cond ((throwing?) (throw-item (+ throw-spin throw-pierce) 0.17 3))
		      (#t #f))))
	(define secondary (λ () (try-to-throw)))
	(define sprite-id-0 291)
	(define sprite-color-0 #xFF01232F)
	(define sprite-id-1 259)
	(define sprite-color-1 #xFF666666)
	(define sprite-id-2 260)
	(define sprite-color-2 #xFFDDDDDD)
	(define mesh 'm-stoneaxe))))

(define i-stonepickaxe)
(item-sync (item-default (ω ()
	(define id (item-new-id))
	(define sym 'i-stonepickaxe)
	(define name "Stone Pickaxe")
	(define stack-size 1)
	(define dmg 4)
	(define dmg-stone 3)
	(define dmg-dirt 2)
	(define sprite-id-0 291)
	(define sprite-color-0 #xFF01232F)
	(define sprite-id-1 267)
	(define sprite-color-1 #xFF666666)
	(define sprite-id-2 268)
	(define sprite-color-2 #xFFDDDDDD)
	(define mesh 'm-stonepickaxe))))

(define i-blaster)
(item-sync (item-default (ω ()
	(define id (item-new-id))
	(define sym 'i-blaster)
	(define name "Blaster")
	(define inaccuracy 2)
	(define ammunition 'i-crystalbulle)
	(define fire-dmg 6)
	(define fire-health 64)
	(define stack-size 1)
	(define mag-size 30)
	(define primary (λ ()
		(cond ((throwing?) (throw-item throw-spin))
		      ((try-to-shoot 150 6) (beamblast 0.8 4.0 2) (recoil 2.0) (add-inaccuracy 64.0) #t) (#t #f))))
	(define secondary (λ ()
		(cond ((try-to-use 200 0) (toggle-aim 4.0) (add-inaccuracy 64.0) #t) (#t #f))))
	(define tertiary (λ () (item-reload 400)))
	(define burn-up (λ (pos id amount) (explode pos (* amount 0.5))))
	(define sprite-id-0 261)
	(define mesh 'm-blaster))))

(define i-masterblaster)
(item-sync (item-default (ω ()
	(define id (item-new-id))
	(define sym 'i-masterblaster)
	(define name "Master Blaster")
	(define inaccuracy 4)
	(define ammunition 'i-crystalbulle)
	(define fire-dmg 6)
	(define fire-health 64)
	(define stack-size 1)
	(define mag-size 90)
	(define primary (λ ()
		(cond ((throwing?) (throw-item throw-spin))
		      ((try-to-shoot 350 45) (beamblast 6.0 12.0 1024) (recoil 16.0) (add-inaccuracy 24.0) #t) (#t #f))))
	(define secondary (λ ()
		(cond ((try-to-use 200 0) (toggle-aim 3.0) (add-inaccuracy 48.0) #t) (#t #f))))
	(define tertiary (λ () (item-reload 200)))
	(define burn-up (λ (pos id amount) (explode pos (* amount 0.5))))
	(define sprite-id-0 262)
	(define mesh 'm-masterblaster))))

(define i-assaultblaste)
(item-sync (item-default (ω ()
	(define id (item-new-id))
	(define sym 'i-assaultblaste)
	(define name "Assault Blaster")
	(define inaccuracy 8)
	(define ammunition 'i-flamebullet)
	(define fire-dmg 6)
	(define fire-health 64)
	(define stack-size 1)
	(define mag-size 60)
	(define primary (λ ()
		(cond ((throwing?) (throw-item throw-spin))
		      ((try-to-shoot 15 1) (sfx-play sfx-phaser 0.2) (projectile 0 1) (add-inaccuracy 9.0) (recoil 1.0) #t) (#t #f))))
	(define secondary (λ ()
		(cond ((try-to-use 200 0) (toggle-aim 2.0) (add-inaccuracy 32.0) #t) (#t #f))))
	(define tertiary (λ () (item-reload 50)))
	(define burn-up (λ (pos id amount) (explode pos (* amount 0.2))))
	(define sprite-id-0 263)
	(define mesh 'm-assaultblaste))))

(define i-shotgun)
(item-sync (item-default (ω ()
	(define id (item-new-id))
	(define sym 'i-shotgun)
	(define name "Shotgun")
	(define inaccuracy 48)
	(define ammunition 'i-flamebullet)
	(define fire-dmg 6)
	(define fire-health 64)
	(define stack-size 1)
	(define mag-size 60)
	(define primary (λ ()
		(cond ((throwing?) (throw-item throw-spin))
		      ((try-to-shoot 128 6) (sfx-play sfx-phaser 0.5) (shotgun-shot 64) (add-inaccuracy 96.0) (recoil 4.0) #t) (#t #f))))
	(define secondary (λ ()
		(cond ((try-to-use 200 0) (toggle-aim 2.0) (add-inaccuracy 32.0) #t) (#t #f))))
	(define tertiary (λ () (item-reload 256)))
	(define burn-up (λ (pos id amount) (explode pos (* amount 0.2))))
	(define sprite-id-0 264)
	(define mesh 'm-shotgunblaste))))

(define i-crystalbulle)
(item-sync (item-default (ω ()
	(define id (item-new-id))
	(define sym 'i-crystalbulle)
	(define name "Crystal Bullet")
	(define fire-dmg 8)
	(define fire-health 64)
	(define stack-size 999)
	(define burn-up (λ (pos id amount) (explode pos (* amount 0.1))))
	(define sprite-id-0 269)
	(define sprite-color-0 #xFFFFFFFF)
	(define sprite-id-1 270)
	(define sprite-color-1 #xFF5f32d6)
	(define mesh 'm-crystalbulle))))

(define i-ironbar)
(item-sync (item-default (ω ()
	(define id (item-new-id))
	(define sym 'i-ironbar)
	(define name "Iron Bar")
	(define sprite-id-0 265)
	(define sprite-color-0 #xFFAAAAAA)
	(define sprite-id-1 266)
	(define sprite-color-1 #xFFEEEEEE)
	(define mesh 'm-ironbar))))

(define i-ironaxe)
(item-sync (item-default (ω ()
	(define id (item-new-id))
	(define sym 'i-ironaxe)
	(define name "Iron Axe")
	(define stack-size 1)
	(define dmg 6)
	(define dmg-wood 5)
	(define primary (λ ()
		(cond ((throwing?) (throw-item (+ throw-spin throw-pierce) 0.2 5))
		      (#t #f))))
	(define secondary (λ () (try-to-throw)))
	(define sprite-id-0 291)
	(define sprite-color-0 #xFF01232F)
	(define sprite-id-1 259)
	(define sprite-color-1 #xFFAAAAAA)
	(define sprite-id-2 260)
	(define sprite-color-2 #xFFEEEEEE)
	(define mesh 'm-ironaxe))))

(define i-ironpickaxe)
(item-sync (item-default (ω ()
	(define id (item-new-id))
	(define sym 'i-ironpickaxe)
	(define name "Iron Pickaxe")
	(define stack-size 1)
	(define dmg 6)
	(define dmg-stone 5)
	(define dmg-dirt 3)
	(define sprite-id-0 291)
	(define sprite-color-0 #xFF01232F)
	(define sprite-id-1 267)
	(define sprite-color-1 #xFFAAAAAA)
	(define sprite-id-2 268)
	(define sprite-color-2 #xFFEEEEEE)
	(define mesh 'm-ironpickaxe))))

(define i-crystalbar)
(item-sync (item-default (ω ()
	(define id (item-new-id))
	(define sym 'i-crystalbar)
	(define name "Crystal Bar")
	(define sprite-id-1 265)
	(define sprite-color-1 #xFF5f32d6)
	(define sprite-id-2 266)
	(define sprite-color-2 #xFFFFFFFF)
	(define mesh 'm-crystalbar))))

(define i-crystalaxe)
(item-sync (item-default (ω ()
	(define id (item-new-id))
	(define sym 'i-crystalaxe)
	(define name "Crystal Axe")
	(define stack-size 1)
	(define dmg 8)
	(define dmg-wood 8)
	(define primary (λ ()
		(cond ((throwing?) (throw-item (+ throw-spin throw-pierce) 0.25 8))
		      (#t #f))))
	(define secondary (lambda () (try-to-throw)))
	(define sprite-id-0 291)
	(define sprite-color-0 #xFF01232F)
	(define sprite-id-1 259)
	(define sprite-color-1 #xFF5f32d6)
	(define sprite-id-2 260)
	(define sprite-color-2 #xFFFFFFFF)
	(define mesh 'm-crystalaxe))))

(define i-crystalpickax)
(item-sync (item-default (ω ()
	(define id (item-new-id))
	(define sym 'i-crystalpickax)
	(define name "Crystal Pickaxe")
	(define stack-size 1)
	(define dmg 8)
	(define dmg-stone 8)
	(define dmg-diro 8)
	(define sprite-id-0 291)
	(define sprite-color-0 #xFF01232F)
	(define sprite-id-1 267)
	(define sprite-color-1 #xFF5f32d6)
	(define sprite-id-2 268)
	(define sprite-color-2 #xFFFFFFFF)
	(define mesh 'm-crystalpickax))))

(define i-cherry)
(item-sync (item-default (ω ()
	(define id (item-new-id))
	(define sym 'i-cherry)
	(define name "Cherry")
	(define fire-dmg 6)
	(define fire-health 96)
	(define secondary (λ ()
		(cond	((>= (player-hp) (player-maxhp)) #f)
			((try-to-use) (do-eat 6 id) #t)
			(#t #f))))
	(define sprite-id-0 272)
	(define mesh 'm-cherry))))

(define i-clusterbomb)
(item-sync (item-default (ω ()
	(define id (item-new-id))
	(define sym 'i-clusterbomb)
	(define name "Cluster Bomb")
	(define fire-dmg 12)
	(define fire-health 96)
	(define secondary (λ () (cond ((try-to-use)
		(grenade-new (vy+ (player-pos) 0.5) (player-rot) 0.1 256 3.0)
		(start-anim 0 300) #t)
		(#t #f))))
	(define burn-up (λ (pos id amount) (explode pos (* amount 6)) (say ((ansi-yellow "Ka") (ansi-red "bo000oom")))))
	(define sprite-id-0 273)
	(define mesh 'm-bomb))))

(define i-glider)
(item-sync (item-default (ω ()
	(define id (item-new-id))
	(define sym 'i-glider)
	(define name "Glider")
	(define stack-size 1)
	(define fire-dmg 8)
	(define fire-health 198)
	(define sprite-id-0 274)
	(define mesh 'm-glider))))

(define i-hook)
(item-sync (item-default (ω ()
	(define id (item-new-id))
	(define sym 'i-hook)
	(define name "Hook")
	(define stack-size 1)
	(define fire-health 1024)
	(define sprite-id-0 275)
	(define mesh 'm-hook))))

(define i-jetpack)
(item-sync (item-default (ω ()
	(define id (item-new-id))
	(define sym 'i-jetpack)
	(define name "Jetpack")
	(define stack-size 1)
	(define sprite-id-0 276)
	(define mesh 'm-jetpack))))

(define i-poop)
(item-sync (item-default (ω ()
	(define id (item-new-id))
	(define sym 'i-poop)
	(define name "Poop")
	(define secondary (λ ()
		(cond	((try-to-use) (start-anim 4 1200) (player-hp (- (player-hp) 1)) (sfx-play sfx-chomp)
			(yield (timeout 1000) (λ () (say (ansi-brown "Mmmhhhh")) (player-hp (- (player-hp) 1))))
			(yield (timeout 2000) (λ () (say (ansi-yellow "Lecker")) (player-hp (- (player-hp) 1))))
			(yield (timeout 3000) (λ () (say (ansi-dark-red "Schmecker")) (player-hp (- (player-hp) 1)))) #t)
			(#t #f))))
	(define drop-chance 4095)
	; Still need to spawn in the plants/trees
	(define drop-handler (λ (pos id amount) -1))
	(define sprite-id-0 277)
	(define mesh 'm-poop))))

(define i-meat)
(item-sync (item-default (ω ()
	(define id (item-new-id))
	(define sym 'i-meat)
	(define name "Meat")
	(define ammunition id)
	(define fire-health 96)
	(define secondary (λ ()
		(cond	((>= (player-hp) (player-maxhp)) #f)
			((try-to-use) (do-eat 4 id) #t)
			(#t #f))))
	(define burn-up (λ (pos id amount) (item-drop-new pos i-cookedmeat amount)))
	(define drop-chance 65535)
	(define drop-handler (λ (pos id amount) -1))
	(define sprite-id-0 278)
	(define mesh 'm-meat))))

(define i-cookedmeat)
(item-sync (item-default (ω ()
	(define id (item-new-id))
	(define sym 'i-cookedmeat)
	(define name "Cooked Meat")
	(define ammunition id)
	(define fire-health 48)
	(define secondary (λ ()
		(cond	((>= (player-hp) (player-maxhp)) #f)
			((try-to-use) (do-eat 20 id) #t)
			(#t #f))))
	(define burn-up (λ (pos id amount) (item-drop-new pos i-burntmeat amount)))
	(define sprite-id-0 279)
	(define mesh 'm-cookedmeat))))

(define i-fur)
(item-sync (item-default (ω ()
	(define id (item-new-id))
	(define sym 'i-fur)
	(define name "Fur")
	(define drop-chance 65535)
	(define drop-handler (λ (pos id amount) -1))
	(define sprite-id-0 280)
	(define mesh 'm-fur))))

(define i-burntmeat)
(item-sync (item-default (ω ()
	(define id (item-new-id))
	(define sym 'i-burntmeat)
	(define name "Burnt Meat")
	(define secondary (λ ()
		(cond ((try-to-use) (start-anim 4 1800) (sfx-play sfx-chomp) #t) (#t #f))))
	(define drop-chance 65535)
	(define drop-handler (λ (pos id amount) -1))
	(define sprite-id-0 281)
	(define mesh 'm-burntmeat))))

(define i-flintandsteel)
(item-sync (item-default (ω ()
	(define id (item-new-id))
	(define sym 'i-flintandsteel)
	(define stack-size 1)
	(define name "Flint and Steel")
	(define primary (λ ()
		(cond ((throwing?) (throw-item throw-spin))
		      ((try-to-use 200 0) (add-cooldown 200) (start-anim 3 600) (fire-new (player-raycast 0) 8) #t) (#t #t))))
	(define secondary (λ ()
		(cond ((try-to-use 200 0) (add-cooldown 200) (start-anim 3 600) (fire-new (player-raycast 1) 8) #t) (#t #f))))
	(define sprite-id-0 282)
	(define mesh 'm-flintandsteel))))

(define i-flamethrower)
(item-sync (item-default (ω ()
	(define id (item-new-id))
	(define sym 'i-flamethrower)
	(define stack-size 1)
	(define mag-size 90)
	(define fire-dmg 8)
	(define fire-health 128)
	(define inaccuracy 16)
	(define ammunition 'i-flamebullet)
	(define name "Flamethrower")
	(define primary (λ ()
		(cond ((throwing?) (throw-item throw-spin))
		      ((try-to-shoot 15 1) (sfx-play sfx-phaser 0.2) (projectile 0 5) (projectile 0 5) (projectile 0 5) (projectile 0 5) (add-inaccuracy 1.0) (recoil 1.0) #t) (#t #f))))
	(define secondary (λ ()
		(cond ((try-to-use 200 0) (toggle-aim 2.0) (add-inaccuracy 32.0) #t) (#t #f))))
	(define tertiary (lambda () (item-reload 128)))
	(define burn-up (λ (pos id amount) (explode pos (* amount 0.2))))
	(define sprite-id-0 283)
	(define mesh 'm-flamethrower))))

(define i-flamebullet)
(item-sync (item-default (ω ()
	(define id (item-new-id))
	(define sym 'i-flamebullet)
	(define stack-size 999)
	(define fire-dmg 8)
	(define fire-health 64)
	(define name "Flamebullet")
	(define burn-up (λ (pos id amount) (explode pos (* amount 0.1))))
	(define sprite-id-0 269)
	(define sprite-color-0 #xFFFFFFFF)
	(define sprite-id-1 271)
	(define sprite-color-1 #xFF2468e0)
	(define mesh 'm-flamebullet))))

(define i-irondust)
(item-sync (item-default (ω ()
	(define id (item-new-id))
	(define sym 'i-irondust)
	(define fire-dmg 1)
	(define fire-health 256)
	(define name "Irondust")
	(define burn-up (λ (pos id amount) (item-drop-new pos i-ironbar amount)))
	(define sprite-id-0 285)
	(define sprite-color-0 #xFF3e3e8f)
	(define mesh 'm-irondust))))

(define i-crystaldust)
(item-sync (item-default (ω ()
	(define id (item-new-id))
	(define sym 'i-crystaldust)
	(define fire-dmg 1)
	(define fire-health 512)
	(define name "Crystaldust")
	(define burn-up (λ (pos id amount) (item-drop-new pos i-crystalbar amount)))
	(define sprite-id-0 285)
	(define sprite-color-0 #xFF794DEA)
	(define mesh 'm-crystaldust))))

(define i-flamestick)
(item-sync (item-default (ω ()
	(define id (item-new-id))
	(define sym 'i-flamestick)
	(define stack-size 1)
	(define name "Flamestick")
	(define primary (λ ()
		(cond ((throwing?) (throw-item throw-spin))
		      ((try-to-use 200 0) (add-cooldown 200) (start-anim 3 600)
				(if (zero? (random 8))
					(begin (ansi-green (say "Yay")) (fire-new (player-raycast 0) 8))
					(begin (say "No luck, maybe next time")) #t)) (#t #t))))
	(define secondary (λ ()
		(cond ((try-to-use 200 0) (add-cooldown 200) (start-anim 3 600) (fire-new (player-raycast 1) 8) #t) (#t #f))))
	(define sprite-id-0 287)
	(define mesh 'm-flintandsteel))))

(define i-waterthrower)
(item-sync (item-default (ω ()
	(define id (item-new-id))
	(define sym 'i-waterthrower)
	(define name "Waterthrower")
	(define ammunition 'i-flamebullet)
	(define inaccuracy 16)
	(define mag-size 90)
	(define stack-size 1)
	(define primary (λ ()
		(cond ((throwing?) (throw-item throw-spin))
		      ((try-to-shoot 15 1) (sfx-play sfx-phaser 0.2) (projectile 0 6) (projectile 0 6) (projectile 0 6) (projectile 0 6) (add-inaccuracy 1.0) (recoil 1.0) #t) (#t #f))))
	(define secondary (λ ()
		(cond ((try-to-use 200 0) (toggle-aim 2.0) (add-inaccuracy 32.0) #t) (#t #f))))
	(define tertiary (λ () (item-reload 128)))
	(define sprite-id-0 288)
	(define mesh 'm-waterthrower))))

(define i-stonespear)
(item-sync (item-default (ω ()
	(define id (item-new-id))
	(define sym 'i-stonespear)
	(define name "Stone Spear")
	(define stack-size 1)
	(define dmg 6)
	(define primary (λ ()
		(cond ((throwing?) (throw-item (+ throw-heavy throw-pierce) 0.25 4)) (#t #f))))
	(define secondary (λ () (try-to-throw)))
	(define sprite-id-0 291)
	(define sprite-color-0 #xFF01232F)
	(define sprite-id-1 290)
	(define sprite-color-1 #xFF666666)
	(define sprite-id-2 289)
	(define sprite-color-2 #xFFDDDDDD)
	(define mesh 'm-stonespear))))

(define i-ironspear)
(item-sync (item-default (ω ()
	(define id (item-new-id))
	(define sym 'i-ironspear)
	(define name "Iron Spear")
	(define stack-size 1)
	(define dmg 8)
	(define primary (λ ()
		(cond ((throwing?) (throw-item (+ throw-heavy throw-pierce) 0.35 8)) (#t #f))))
	(define secondary (λ () (try-to-throw)))
	(define sprite-id-0 291)
	(define sprite-color-0 #xFF01232F)
	(define sprite-id-1 290)
	(define sprite-color-1 #xFFAAAAAA)
	(define sprite-id-2 289)
	(define sprite-color-2 #xFFFFFFFF)
	(define mesh 'm-ironspear))))

(define i-crystalspear)
(item-sync (item-default (ω ()
	(define id (item-new-id))
	(define sym 'i-crystalspear)
	(define name "Crystal Spear")
	(define stack-size 1)
	(define dmg 10)
	(define primary (λ ()
		(cond ((throwing?) (throw-item (+ throw-heavy throw-pierce) 0.4 12)) (#t #f))))
	(define secondary (λ () (try-to-throw)))
	(define sprite-id-0 291)
	(define sprite-color-0 #xFF01232F)
	(define sprite-id-1 290)
	(define sprite-color-1 #xFF5f32d6)
	(define sprite-id-2 289)
	(define sprite-color-2 #xFFFFFFFF)
	(define mesh 'm-crystalspear))))

(define i-plantmatter)
(item-sync (item-default (ω ()
	(define id (item-new-id))
	(define sym 'i-plantmatter)
	(define name "Plantmatter")
	(define fire-dmg 2)
	(define fire-health 255)
	(define drop-chance 65535)
	(define drop-handler (λ (pos id amount) (item-drop-new pos i-straw 1) -1))
	(define sprite-id-0 292)
	(define sprite-color-0 #xFF087500)
	(define mesh 'm-plantmatter))))

(define i-straw)
(item-sync (item-default (ω ()
	(define id (item-new-id))
	(define sym 'i-straw)
	(define name "Straw")
	(define fire-dmg 8)
	(define fire-health 256)
	(define sprite-id-0 292)
	(define sprite-color-0 #xFF48A7D3)
	(define mesh 'm-straw))))

(event-bind "on-init" (λ () ""
	(item-sync-all)
	(log (ansi-green "Items initialized"))))

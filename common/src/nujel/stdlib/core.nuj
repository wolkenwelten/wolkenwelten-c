;; Wolkenwelten - Copyright (C) 2020-2021 - Benjamin Vincent Schulenburg
;;
;; This program is free software: you can redistribute it and/or modify
;; it under the terms of the GNU Affero General Public License as published by
;; the Free Software Foundation, either version 3 of the License, or
;; (at your option) any later version.
;;
;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU Affero General Public License for more details.
;;
;; You should have received a copy of the GNU Affero General Public License
;; along with this program.  If not, see <http://www.gnu.org/licenses/>.

;; Contains various little pieces that were implemented in nujel instead of
;; C because of various reasons

(def caar (λ (p) "(car (car p))"
	(car (car p))))

(def cadr (λ (p) "(car (cdr p))"
	(car (cdr p))))

(def cdar (λ (p) "(cdr (car p))"
	(cdr (car p))))

(def cddr (λ (p) "(cdr (cdr p))"
	(cdr (cdr p))))

(def caddr (λ (p) "(car (cdr (cdr p)))"
	(car (cdr (cdr p)))))

(def cdddr (λ (p) "(cdr (cdr (cdr p)))"
	(cdr (cdr (cdr p)))))

(def cadddr (λ (p) "(car (cdr (cdr (cdr p))))"
	(car (cdr (cdr (cdr p))))))

(def ++ (λ (i) "(+ I 1)"
	(+ i 1)))

(def -- (λ (i) "(- I 1)"
	(- i 1)))

(def length (λ (a) "Returns the length of a"
	(cond ((string? a) (str-len a))
              ((pair? a) (list-length a))
              (#t 0))))

(def describe (λ (a) "Returns the DocString to its argument, if available"
	(cond ((not (string? a)) "Please quote the symbol in question, like (describe \"help\")")
	      (#t (let ((ds (car (cl-text (resolve (str->sym a)))))
	      (args (arg-list (resolve (str->sym a))))
	      (fn (cat a)))
		("(" fn args ") - " (if (string? ds) ds "No DocString found")))))))

(def display (λ (a) "Displays its argument"
	(print a)))

(def newline (λ () "Prints a single line feed character"
	(display "\n")))

(def list (λ (...l) "Returns its arguments as a list"
	...l))

(def when   (δ (c @...expr) "Evaluates l and returns the last result if c is #t"
	(cond (c (eval (cons 'begin @...expr))) (#t #f))))
(def unless (δ (c @...expr) "Evaluates l and returns the last result if c is #f"
	(cond (c #f) (#t (eval (cons 'begin @...expr))))))

(def arr-fill! (λ (a v i) "Fills array a with value v"
	(cond ((>= i (arr-length a)) a)
	      (#t (a (int i) v) (arr-fill! a v (++ i))))))

(def min-iter (λ (a l) "Iter for (min)"
	(cond ((nil? l) a)
	      ((< a (car l)) (min-iter a (cdr l)))
	      (#t (min-iter (car l) (cdr l))))))
(def min (λ (...l) "Returns the minimum value of its arguments"
	(cond ((nil? ...l) 0)
	      ((nil? (cdr ...l)) (car ...l))
	      (#t (min-iter (car ...l) (cdr ...l))))))

(def max-iter (λ (a l) "Iter for (max)"
	(cond ((nil? l) a)
	      ((> a (car l)) (max-iter a (cdr l)))
	      (#t (max-iter (car l) (cdr l))))))
(def max (λ (...l) "Returns the maximum value of its arguments"
	(cond ((nil? ...l) 0)
	      ((nil? (cdr ...l)) (car ...l))
	      (#t (max-iter (car ...l) (cdr ...l))))))

(def lognand (λ (...l) "Returns the Nand of its arguments"
	(lognot (apply logand ...l))))

#!/usr/bin/env bash

# Ansi color code variables
red="\e[0;91m"
blue="\e[0;94m"
expand_bg="\e[K"
blue_bg="\e[0;104m${expand_bg}"
red_bg="\e[0;101;93m"
green_bg="\e[0;102;80m"
green="\e[0;92m"
white="\e[0;97m"
bold="\e[1m"
uline="\e[4m"
reset="\e[0m"

errorCount=0
successCount=0

test_success () {
	echo -en "$green_bg[YEAH]$reset "
	printf "%.70s\n" "$1"
}

test_rerror () {
	echo -e "$red_bg[OHNO]$reset" "$2"
	echo "$1"
}

test_ecerror () {
	echo -e "$red_bg[EXIT]$reset" "$2"
	echo "$1"
}

trim() {
	local var="$*"
	var="${var#"${var%%[![:space:]]*}"}"
	var="${var%"${var##*[![:space:]]}"}"
	printf '%s' "$var"
}

test_sexpr_oom () {
	sexpr="$1"
	goal="$2"
	val=`./nujel -e "$sexpr" 2> /dev/null`
	eval=$?
	if [ "$eval" -eq 0 ]; then
		test_success "$sexpr"
		successCount=$((successCount + 1))
	else
		test_rerror "$sexpr" "'$goal' != '$val'"
		errorCount=$((errorCount + 1))

	fi
}

test_sexpr () {
	sexpr="$1"
	goal="$2"
	val=`./nujel -e "$sexpr"`
	eval=$?
	val=$(trim "$val")
	val="${val%%*( )}"
	if [ "$eval" -ne 0 ]; then
		test_ecerror "$sexpr" "Interpreter exited with code $eval"
		errorCount=$((errorCount + 1))
	elif [ "$val" != "$goal" ]; then
		test_rerror "$sexpr" "'$goal' != '$val'"
		errorCount=$((errorCount + 1))
	else
		test_success "$sexpr"
		successCount=$((successCount + 1))
	fi
}

test_sexpr_exitcode () {
	sexpr="$1"
	goal=$2
	./nujel -e "$sexpr" 2> /dev/null > /dev/null
	val=$?
	if [ "$val" -eq "$goal" ]; then
		test_success "$sexpr"
		successCount=$((successCount + 1))
	else
		test_rerror "$sexpr" "Exitcode: $val != $goal"
		errorCount=$((errorCount + 1))

	fi
}

print_report () {
	echo ""
	echo $successCount / $((successCount + errorCount)) "Tests Successful"
}

test_sexpr_exitcode "(quit (+ 20 3))" 23
test_sexpr "(+ 42 (- 3))" "39"
test_sexpr "(* 4 (- (+ 1 (+ 1 1)) (- 3 3 3)))" "24"
test_sexpr "(div 9 3)" "3"
test_sexpr "(let ((vier -4)) (+ (% 9 4) (/ -9 vier)))" "3"
test_sexpr "(+ (* 2 (/ 32 8) (- 16 8)) 5)" "69"
test_sexpr "(define eins 1) (define zwei 2) (+ eins zwei)" "3"
test_sexpr "(define eins 1) (define zwei 2) (define drei (+ eins zwei)) (set! eins (- drei drei drei))" "-3"
test_sexpr "(define zahl 1_2_8) zahl" "128"
test_sexpr "(let ((a 10)) a)" "10"
test_sexpr "(define b 20) (let ((a b)) a)" "20"
test_sexpr "(define b 20) (let ((a b)) (set! a 10) a)" "10"
test_sexpr "(define b 20) (let ((a b)) (set! a 10) b)" "20"
test_sexpr "(let ((a 12) (b 30)) (+ a b))" "42"
test_sexpr "(define square (lambda (a) (* a a))) (square 4)" "16"
test_sexpr "'(1 2 3)" "(1 2 3)"
test_sexpr "'test" "test"
test_sexpr "(abs (vec -1 -2 -3))" "(vec 1.0 2.0 3.0)"
test_sexpr "(- -1 -1)" "0"
test_sexpr "(or #f (and (> 5 1) (not (< 5 1)) (>= 5 5) (<= 5 5)))" "#t"
test_sexpr "(and (= #t #t) (= #f #f) (not (= #f #t)) (= 2 \"2\"))" "#t"
test_sexpr "(+ 1.11111 2.22222)" "3.33333"
test_sexpr "(let ((a \"Hallo, Welt#\")) (cat (substr a 0 1) (substr a -1) (substr a 0 -7)))" "\"H#Hallo\""
test_sexpr "(length \"Hallo, Welt\")" "11"
test_sexpr "(define abs (lambda (a) (if (neg? a) (- 0 a) a))) (+ (abs -7) (abs 7))" "14"
test_sexpr "(and (or #f #t) (and #t #t))" "#t"
test_sexpr "(and (neg? -1) (neg? -0.01) (pos? 0) (pos? 0.01) (not (neg? 0)) (not (pos? -0.01)) (not (neg? #f)))" "#t"
test_sexpr "(number? 0.1)" "#t"
test_sexpr "(and (number? 1) (number? -1) (number? 0) (number? 0.1))" "#t"
test_sexpr "(and (number? (vec 1)) (not (number? #f)) (not (number? \"123\")))" "#t"
test_sexpr "(and (number? 1) (number? -1) (number? 0) (number? 0.1) (number? (vec 1)) (not (number? #f)) (not (number? \"123\")))" "#t"
test_sexpr "(- (int (cat 12 \"3\" \"45 Test\")) 5)" "12340"
test_sexpr "(define a \"Test\") a" "\"Test\""
test_sexpr "(let ((a (cat 12 \"3\" 45))) (- (int a) (length a)))" "12340"
test_sexpr "(int (cat \"123\" \"abc\" 456))" "123"
test_sexpr "(+ (+ 1.1 2.2) (+ 1.1 3) (+ 1 3.2))" "11.6"
test_sexpr "(+ (+ 1.1 3) (+ 1 3.3) (+ 3.3 4.1 4.3))" "20.1"
test_sexpr "(add (mul 3.2 3.2) (sub 5.5 1.1 1 1.1) (div 9.9 3.3))" "15.54"
test_sexpr "(% 10 3.1)" "0.7"
test_sexpr "(+ 1 (div 10 0))" "#inf"
test_sexpr "(add (+ 1.1 2.2) (+ 1.1 3) (+ 1 3.3))" "11.7"
test_sexpr "(+ (int 10) (int 10.23) (int \"8\")" "28"
test_sexpr "(+ (float 10) (int \"10\") (float \"-8.25\"))" "11.75"
test_sexpr "(+ (abs \"-10\") (int 8.2) 12.3)" "30.3"
test_sexpr "(+ (abs \"-10\") (int 8.2) 12.3)" "30.3"
test_sexpr "(and (not (< 3 2)) (zero? 0) (> 3.1 2.1) (> 3 2) (>= 4 \"3\") (>= 3 3) (<= 3 3) (not (>= \"2\" 3))" "#t"
test_sexpr "(+ (vec 1) 1 10)"  "(vec 12.0 12.0 12.0)"
test_sexpr "(+ (vec 1) (vec 1 2) (vec 1 2 3))"  "(vec 3.0 5.0 6.0)"
test_sexpr "(+ 1 (vec 1) 1.0)"  "(vec 3.0 3.0 3.0)"
test_sexpr "(+ 1.0 (vec 1) \"1\")"  "(vec 3.0 3.0 3.0)"
test_sexpr "(- (vec 1) (vec 1.0) (vec \"1\")"  "(vec -1.0 -1.0 -1.0)"
test_sexpr "(+ (- 1 -1.0) (- 5 1.1 1) (- 1 1.1 1) (- 1 1.1 (int \"1\")))" "2.7"
test_sexpr "(+ 1 (vec 1) 1.0)" "(vec 3.0 3.0 3.0)"
test_sexpr "(- 1 (vec 1) 1.0)" "(vec -1.0 -1.0 -1.0)"
test_sexpr "(* (vec 2) \"4\")" "(vec 8.0 8.0 8.0)"
test_sexpr "(div (vec 99) (cat 1 1))" "(vec 9.0 9.0 9.0)"
test_sexpr "(mod (vec 9) 2)" "(vec 1.0 1.0 1.0)"
test_sexpr "(float (int (+ (vec 1) (vec 0 9 9))))" "1.0"
test_sexpr "(int (float (+ (vec 1) (vec 0 9 9))))" "1"
test_sexpr "(cons)" "()"
test_sexpr "(cons 1)" "(1)"
test_sexpr "(cons 1 2)" "(1 . 2)"
test_sexpr "(cons 1 '(2))" "(1 2)"
test_sexpr "(- #nil)" "0"
test_sexpr "(and #nil #nil)" "#f"
test_sexpr "(cat (int #nil))" "\"0\""
test_sexpr "(and (pair? (cons 1 '(2))) (not (pair? 1)))" "#t"
test_sexpr "(car (cons 1 '(2)))" "1"
test_sexpr "(cdr (cons 1 '(2)))" "(2)"
test_sexpr "(+ (cadr '(1 2)) (cadr #nil) (cadr '(1)))" "2"
test_sexpr "(string? (describe \"++\"))" "#t"
test_sexpr "(reverse '(1 2 3 4))" "(4 3 2 1)"
test_sexpr "(append '(1 2.0 3) '(1 2.0 3))" "(1 2.0 3 1 2.0 3)"
test_sexpr "(++ (-- (length '(1 2 3)))" "3"
test_sexpr "(filter int? '(1 2.0 #t 4))" "(1 4)"
test_sexpr "(filter float? '(1 2.0 #t 4))" "(2.0)"
test_sexpr "(filter bool? '(1 2.0 #t 4))" "(#t)"
test_sexpr "(sublist   '(1 2 3 4 5 6) 1 3)" "(2 3)"
test_sexpr "(list-head '(1 2 3 4 5 6) 3)" "(1 2 3)"
test_sexpr "(list-tail (list 1 2 3 4 5 6) 3)" "(4 5 6)"
test_sexpr "(last-pair (list 1 2 3))" "(3)"
test_sexpr "(except-last-pair '(1 2 3))" "(1 2)"
test_sexpr "(let ((l '(1.0 #t \"a\"))) (append (except-last-pair l) (last-pair l))))" "(1.0 #t \"a\")"
test_sexpr "(and (for-all? '(1 2 3) int?) (not (for-all? '(1 2 3.0) int?)))" "#t"
test_sexpr "(and (there-exists? '(1.0 2 3.0) int?) (not (there-exists? '(1.0 2.0 3.0) int?)))" "#t"
test_sexpr "(member \"asd\" '(123 456 \"asd\" #t #f))" "(\"asd\" #t #f)"
test_sexpr "(and (eq? \"asd\" \"asd\") (not (eq? \"asd\" \"bsd\")) (not (eq? \"asd\" \"asdasd\")))" "#t"
test_sexpr_oom "(define inf-loop (lambda (a) (inf-loop (++ a)))) (inf-loop)" ""
test_sexpr "(+ (reduce + (make-list 10 2)) (list-ref '(1 2 3 4) 1) (list-ref '(1 2) 3) (list-ref '(1 2) 0))" "23"
test_sexpr "(map (lambda (a) (* a a)) (cons (vec 2) '(3 4.0)))" "((vec 4.0 4.0 4.0) 9 16.0)"
test_sexpr "(and (nil? #nil) (not (nil? \"NotNil\") (inf? #inf) (not (inf? \"NotInf\") (vec? (vec 1)) (not (inf? \"NotVec\"))" "#t"
test_sexpr "(define count (let ((a 0)) (lambda (b) (set! a (+ a (cond ((number? b) b) (#t 1))))))) (count 10) (count)" "11"
test_sexpr "(let ((a 10)) (when (when #t (set! a (+ 2 \"2\")) #f) (set! a -1)) a)" "4"
test_sexpr "(define vs (lambda (a) (vec (vz a) (vy a) (vx a)))) (vs (vec 9 3.0 \"1\"))" "(vec 1.0 3.0 9.0)"
test_sexpr "(define fib (lambda (a) (cond ((zero? a) 0) ((= a 1) 1) (#t (+ (fib (- a 1)) (fib (- a 2))))))) (fib 4)" "3"
test_sexpr "(define fib (lambda (a) (cond ((zero? a) 0) ((= a 1) 1) (#t (+ (fib (- a 1)) (fib (- a 2))))))) (fib 8)" "21"
test_sexpr "(define fib-iter (lambda (a b count) (cond ((= count 0) b) (#t (fib-iter (+ a b) a (- count 1)))))) (define fib (lambda (n) (fib-iter 1 0 n))) (fib 40)" "102334155"
test_sexpr_exitcode "(define fib (lambda (a) (cond ((zero? a) 0) ((= a 1) 1) (#t (+ (fib (- a 1)) (fib (- a 2))))))) (fib 32)" 0
test_sexpr "(cat 1 1.0)" "\"11.0\""
test_sexpr "(div (vec 99) (cat 1 1.0))" "(vec 9.0 9.0 9.0)"
test_sexpr "(eval '(+ 1 2 3))" "6"
test_sexpr "(let ((cur-arr #(1 2 3 4))) (arr-set! cur-arr 0 99 12) cur-arr)" "#(99 12 3 4)"
test_sexpr "(arr-length #(1 2 3 4))" "4"
test_sexpr "(arr-ref #(1 2 3 4) 1)" "2"
test_sexpr "(arr-length (arr-new 3))" "3"
test_sexpr "(arr-fill! (arr-new 2) 42)" "#(42 42)"
test_sexpr "(+ (apply + '(1 2 3)) (apply ++ 3)" "10"
test_sexpr "(apply quit)" ""
test_sexpr "(apply +)" "0"
test_sexpr "(define cb '+) (apply cb)" "0"
test_sexpr "(define cb '++) (apply cb)" "1"
test_sexpr "(apply #nil)" "()"
test_sexpr "(length \"12345\")" "5"
test_sexpr "(or 0 0)" "#f"
test_sexpr "(and 1 1)" "#t"
test_sexpr "(bool 0)" "#f"
test_sexpr "(bool 1)" "#t"
test_sexpr "(lambda (a b c) (+ a b c))" "(Î» (a b c) (+ a b c))"
test_sexpr "((lambda (a) (+ a 4)) 2)" "6"
test_sexpr "((lambda (a) (cond ((zero? a) 0) (#t (display a) ((cl-lambda 1) (-- a))))) 10)" "109876543210"
test_sexpr "(define test 1) (define test 2) test" "2"
test_sexpr "(max)" "0"
test_sexpr "(min)" "0"
test_sexpr "(max 1)" "1"
test_sexpr "(min 4)" "4"
test_sexpr "(min 4 9)" "4"
test_sexpr "(max 4 9)" "9"
test_sexpr "(max 1 4.0 9 25)" "25"
test_sexpr "(min 1 4.0 9 25)" "1"
test_sexpr "(even? 2)" "#t"
test_sexpr "(even? 9)" "#f"
test_sexpr "(odd? 7)" "#t"
test_sexpr "(odd? 4)" "#f"
test_sexpr "(set! PI 3) PI" "3.14159"
test_sexpr "(str-up \"asD123\")" "\"ASD123\""
test_sexpr "(str-down \"aSD123\")" "\"asd123\""
test_sexpr "(str-capitalize \"aSD123\")" "\"Asd123\""
test_sexpr "(floor 1.3)" "1.0"
test_sexpr "(floor (vec 1.3 1.3 1.3))" "(vec 1.0 1.0 1.0)"
test_sexpr "(ceil 1.3)" "2.0"
test_sexpr "(ceil (vec 1.3 1.3 1.3))" "(vec 2.0 2.0 2.0)"
test_sexpr "(round 1.3)" "1.0"
test_sexpr "(round 1.51)" "2.0"
test_sexpr "(sqrt 9)" "3.0"
test_sexpr "(sqrt (vec 25 25 25))" "(vec 5.0 5.0 5.0)"
test_sexpr "(int (pow 2 8))" "256"
test_sexpr "(pow 2.0 8)" "256.0"
test_sexpr "(pow 2.0 (vec 2.0 3.0 4.0))" "(vec 4.0 8.0 16.0)"
test_sexpr "(str 123)" "\"123\""
test_sexpr "testerle" "testerle"
test_sexpr "(:asd qwerty)" "(:asd qwerty)"
test_sexpr "(define test 123) test" "123"
test_sexpr "(define test 123) (undefine! test) test" "test"
test_sexpr "(undefine! testerle)" "#f"
test_sexpr "4 ; 5" "4"
test_sexpr $'4 ; 5\n6' "6"
test_sexpr "(define test (cons 1 2)) test" "(1 . 2)"
test_sexpr "(define test (cons 1 2)) (set-car! test 3)" "(3 . 2)"
test_sexpr "(define test (cons 1 2)) (set-car! test 3) (set-cdr! test 4)" "(3 . 4)"
test_sexpr "(define eins (object () (define say (lambda () \"Eins\")))) (eins (say))" "\"Eins\""
test_sexpr "(define eins (object () (define say (lambda () \"Eins\")))) (define zwei (eins (object))) (zwei (say))" "\"Eins\""
test_sexpr "(define a 1) (unless (= 2 2) (set! a 4)) a" "1"
test_sexpr "(define a 1) (unless (= 2 3) (set! a 4)) a" "4"
test_sexpr "(define a 1) (when   (= 2 2) (set! a 4)) a" "4"
test_sexpr "(define a 1) (when   (= 2 3) (set! a 4)) a" "1"
test_sexpr "(\"a\" \"s\" \"d\")" "\"asd\""

#test_sexpr "Ï" "3.14159" Doesnt work on windows, why?
print_report
